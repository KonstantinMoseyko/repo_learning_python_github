# 3.	Написать функцию thesaurus(), принимающую в качестве аргументов имена сотрудников и
# возвращающую словарь, в котором ключи — первые буквы имён, а значения —
# списки, содержащие имена, начинающиеся с соответствующей буквы. Например:
# >>> thesaurus("Иван", "Мария", "Петр", "Илья")
# {"И": ["Иван", "Илья"], "М": ["Мария"], "П": ["Петр"]}
# Подумайте: полезен ли будет вам оператор распаковки?
# Как поступить, если потребуется сортировка по ключам? Можно ли использовать словарь в этом случае?
# 4.	*(вместо задачи 3) Написать функцию thesaurus_adv(), принимающую в качестве аргументов
# строки в формате «Имя Фамилия» и возвращающую словарь, в котором ключи — первые буквы фамилий,
# а значения — словари, реализованные по схеме предыдущего задания и содержащие записи,
# в которых фамилия начинается с соответствующей буквы. Например:
# >>> thesaurus_adv("Иван Сергеев", "Инна Серова", "Петр Алексеев", "Илья Иванов", "Анна Савельева")
# {
#     "А": {
#         "П": ["Петр Алексеев"]
#     },
#     "И": {
#         "И": ["Илья Иванов"]
#     },
#     "С": {
#         "И": ["Иван Сергеев", "Инна Серова"],
#         "А": ["Анна Савельева"]
#     }
# }
# Как поступить, если потребуется сортировка по ключам?


def thesaurus_adv(*args):
    """

    Функция для создания словаря «Имя Фамилия»

    :param args: строки в формате «Имя Фамилия»
    :return: словарь, в котором ключи — первые буквы фамилий,
    а значения — словари в которых ключи — первые буквы имён, а значения —
    списки, содержащие имена, начинающиеся с соответствующей буквы

    """
    name_surname_dict = {}
    for n_sn in args:
        name_surname_dict.setdefault(n_sn.split()[1][0], {}).setdefault(n_sn.split()[0][0], []).append(n_sn)
    return name_surname_dict


print(thesaurus_adv("Иван Сергеев", "Инна Серова", "Петр Алексеев",
                    "Илья Иванов", "Анна Савельева", "Юнона Ветрякова",
                    "Борис Аркадьев", "Антон Серов", "Павел Анисимов"))
